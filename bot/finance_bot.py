# -*- coding: utf-8 -*-
"""
–û—Å–Ω–æ–≤–Ω–æ–π –∫–ª–∞—Å—Å —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–≥–æ –±–æ—Ç–∞
"""
import telebot
from telebot.storage import StateMemoryStorage
from telebot.types import Message, CallbackQuery, ReplyKeyboardRemove, InlineKeyboardMarkup, InlineKeyboardButton
from datetime import datetime
from typing import Dict, Any

from config.settings import TELEGRAM_BOT_TOKEN
from google_sheets.client import GoogleSheetsClient
from bot.keyboards.main_keyboards import (
    get_main_menu_keyboard,
    get_categories_keyboard,
    get_confirmation_keyboard,
    get_cancel_keyboard,
    get_skip_keyboard,
    get_statistics_keyboard,
    get_management_keyboard,
    get_transactions_list_keyboard,
    get_delete_confirmation_keyboard
)
from bot.states.transaction_states import TransactionStates, MenuStates
from models.transaction import Transaction
from utils.access_checker import check_access


class FinanceBot:
    """–û—Å–Ω–æ–≤–Ω–æ–π –∫–ª–∞—Å—Å —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–≥–æ –±–æ—Ç–∞"""
    
    def __init__(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞"""
        self.state_storage = StateMemoryStorage()
        self.bot = telebot.TeleBot(TELEGRAM_BOT_TOKEN, state_storage=self.state_storage)
        self.user_data: Dict[int, Dict[str, Any]] = {}
        self.sheets_client = GoogleSheetsClient()
        
        # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
        self._register_handlers()
    
    def _register_handlers(self):
        """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –≤—Å–µ—Ö –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤"""
        
        # –ö–æ–º–∞–Ω–¥—ã
        self.bot.message_handler(commands=['start', 'help'])(self.send_welcome)
        self.bot.message_handler(commands=['menu'])(self.show_main_menu)
        
        # Callback –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
        self.bot.callback_query_handler(func=lambda call: call.data in ['add_expense', 'add_income'])(self.handle_add_transaction)
        self.bot.callback_query_handler(func=lambda call: call.data.startswith('cat_'))(self.handle_category_selection)
        self.bot.callback_query_handler(func=lambda call: call.data.startswith('confirm_') and not call.data.startswith('confirm_delete_') and not call.data.startswith('confirm_edit_'))(self.handle_confirmation)
        self.bot.callback_query_handler(func=lambda call: call.data.startswith('cancel_'))(self.handle_cancellation)
        self.bot.callback_query_handler(func=lambda call: call.data == 'back_to_main')(self.handle_back_to_main)
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
        self.bot.callback_query_handler(func=lambda call: call.data == 'show_stats')(self.handle_show_stats)
        self.bot.callback_query_handler(func=lambda call: call.data == 'show_transactions')(self.handle_show_transactions)

        self.bot.callback_query_handler(func=lambda call: call.data == 'delete_transaction')(self.handle_delete_transaction)
        self.bot.callback_query_handler(func=lambda call: call.data.startswith('stats_'))(self.handle_stats_type)
        self.bot.callback_query_handler(func=lambda call: call.data == 'back_to_stats')(self.handle_back_to_stats)
        
        # –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ
        self.bot.callback_query_handler(func=lambda call: call.data == 'show_management')(self.handle_show_management)
        self.bot.callback_query_handler(func=lambda call: call.data == 'refresh_categories')(self.handle_refresh_categories)
        self.bot.callback_query_handler(func=lambda call: call.data == 'cache_info')(self.handle_cache_info)
        self.bot.callback_query_handler(func=lambda call: call.data == 'clear_cache')(self.handle_clear_cache)
        self.bot.callback_query_handler(func=lambda call: call.data == 'system_status')(self.handle_system_status)
        self.bot.callback_query_handler(func=lambda call: call.data == 'back_to_management')(self.handle_back_to_management)
        
        # –£–¥–∞–ª–µ–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
        self.bot.callback_query_handler(func=lambda call: call.data.startswith('delete_trans_'))(self.handle_delete_transaction_selection)
        self.bot.callback_query_handler(func=lambda call: call.data.startswith('confirm_delete_'))(self.handle_confirm_delete_transaction)
        

        
        # –ì–ª–∞–≤–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π
        self.bot.message_handler(func=lambda message: True)(self.handle_all_messages)
    
    def get_user_data(self, user_id: int) -> Dict[str, Any]:
        """
        –ü–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        
        Args:
            user_id (int): ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        
        Returns:
            Dict[str, Any]: –î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        """
        if user_id not in self.user_data:
            self.user_data[user_id] = {}
        return self.user_data[user_id]
    
    def clear_user_data(self, user_id: int):
        """
        –û—á–∏—Å—Ç–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        
        Args:
            user_id (int): ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        """
        if user_id in self.user_data:
            self.user_data[user_id].clear()
    
    def send_welcome(self, message: Message):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥ /start –∏ /help"""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            if not check_access(message):
                self.bot.send_message(
                    message.chat.id,
                    "üö´ –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –±–æ—Ç—É.\n\n"
                    "–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–∞ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."
                )
                return
            
            welcome_text = """
üè¶ *–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –§–∏–Ω–∞–Ω—Å–æ–≤—ã–π –ë–æ—Ç!*

–Ø –ø–æ–º–æ–≥—É –≤–∞–º –≤–µ—Å—Ç–∏ —É—á–µ—Ç –¥–æ—Ö–æ–¥–æ–≤ –∏ —Ä–∞—Å—Ö–æ–¥–æ–≤ –≤ Google Sheets.

*–û—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:*
‚Ä¢ ‚ûï –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç—Ä–∞—Ç –∏ –¥–æ—Ö–æ–¥–æ–≤
‚Ä¢ ‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
‚Ä¢ üóëÔ∏è –£–¥–∞–ª–µ–Ω–∏–µ –∑–∞–ø–∏—Å–µ–π
‚Ä¢ üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏ –≥—Ä–∞—Ñ–∏–∫–∏
‚Ä¢ üìã –ü—Ä–æ—Å–º–æ—Ç—Ä –∏—Å—Ç–æ—Ä–∏–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π

–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å!
            """
            
            self.bot.send_message(
                message.chat.id,
                welcome_text,
                parse_mode='Markdown',
                reply_markup=get_main_menu_keyboard()
            )
            
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
            self.bot.set_state(message.from_user.id, MenuStates.main_menu, message.chat.id)
            
        except Exception as e:
            self.bot.send_message(message.chat.id, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
    
    def show_main_menu(self, message: Message):
        """–ü–æ–∫–∞–∑–∞—Ç—å –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            if not check_access(message):
                self.bot.send_message(
                    message.chat.id,
                    "üö´ –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –±–æ—Ç—É.\n\n"
                    "–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–∞ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."
                )
                return
            
            # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è
            self.clear_user_data(message.from_user.id)
            
            self.bot.send_message(
                message.chat.id,
                "üè¶ *–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é*\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
                parse_mode='Markdown',
                reply_markup=get_main_menu_keyboard()
            )
            
            self.bot.set_state(message.from_user.id, MenuStates.main_menu, message.chat.id)
            
        except Exception as e:
            self.bot.send_message(message.chat.id, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
    
    def handle_add_transaction(self, call: CallbackQuery):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏"""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            if not check_access(call):
                self.bot.answer_callback_query(call.id, "üö´ –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –±–æ—Ç—É.")
                return
            
            transaction_type = "—Ä–∞—Å—Ö–æ–¥—ã" if call.data == "add_expense" else "–¥–æ—Ö–æ–¥—ã"
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–∏–ø —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
            user_session = self.get_user_data(call.from_user.id)
            user_session['transaction_type'] = transaction_type
            
            # –ü–æ–ª—É—á–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
            categories = self.sheets_client.get_categories(transaction_type)
            
            if not categories:
                self.bot.edit_message_text(
                    f"‚ùå –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ {transaction_type} –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ç–∞–±–ª–∏—Ü—ã.",
                    call.message.chat.id,
                    call.message.message_id
                )
                return
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏
            type_text = "üí∏ —Ä–∞—Å—Ö–æ–¥—ã" if transaction_type == "—Ä–∞—Å—Ö–æ–¥—ã" else "üí∞ –¥–æ—Ö–æ–¥—ã"
            self.bot.edit_message_text(
                f"–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è {type_text}:",
                call.message.chat.id,
                call.message.message_id,
                reply_markup=get_categories_keyboard(categories, transaction_type)
            )
            
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
            self.bot.set_state(call.from_user.id, TransactionStates.choosing_category, call.message.chat.id)
            
        except Exception as e:
            self.bot.answer_callback_query(call.id, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")
    
    def handle_category_selection(self, call: CallbackQuery):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
        try:
            # –ü–∞—Ä—Å–∏–º callback_data: cat_—Ä–∞—Å—Ö–æ–¥—ã_–ü–∏—Ç–∞–Ω–∏–µ
            parts = call.data.split('_', 2)
            if len(parts) != 3:
                self.bot.answer_callback_query(call.id, "‚ùå –û—à–∏–±–∫–∞ –¥–∞–Ω–Ω—ã—Ö")
                return
            
            _, transaction_type, category = parts
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é
            user_session = self.get_user_data(call.from_user.id)
            user_session['category'] = category
            
            # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –≤—ã–±–æ—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
            self.bot.edit_message_text(
                f"‚úÖ –í—ã–±—Ä–∞–Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—è: {category}",
                call.message.chat.id,
                call.message.message_id
            )
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –≤–≤–æ–¥–∞ —Å—É–º–º—ã
            self.bot.send_message(
                call.message.chat.id,
                f"üí∞ –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ '{category}':\n\n"
                f"–ü—Ä–∏–º–µ—Ä—ã: 150, 1500.50, 100,25",
                reply_markup=get_cancel_keyboard()
            )
            
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤–≤–æ–¥–∞ —Å—É–º–º—ã
            self.bot.set_state(call.from_user.id, TransactionStates.entering_amount, call.message.chat.id)
            
        except Exception as e:
            self.bot.answer_callback_query(call.id, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")
    
    def handle_all_messages(self, message: Message):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Å–µ—Ö —Å–æ–æ–±—â–µ–Ω–∏–π —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π —Å–æ—Å—Ç–æ—è–Ω–∏–π"""
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if not check_access(message):
            self.bot.send_message(
                message.chat.id,
                "üö´ –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –±–æ—Ç—É.\n\n"
                "–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–∞ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."
            )
            return
        
        user_state = self.bot.get_state(message.from_user.id, message.chat.id)
        
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤–≤–æ–¥–∞ —Å—É–º–º—ã
            if user_state == "TransactionStates:entering_amount":
                self.handle_amount_input_manual(message)
                return
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤–≤–æ–¥–∞ –æ–ø–∏—Å–∞–Ω–∏—è
            if user_state == "TransactionStates:entering_description":
                self.handle_description_input_manual(message)
                return
            

            
            # –ï—Å–ª–∏ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è - –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
            if user_state == "TransactionStates:confirming":
                self.bot.send_message(
                    message.chat.id,
                    "‚è≥ –û–∂–∏–¥–∞–µ—Ç—Å—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –≤—ã—à–µ."
                )
                return
            

            
            # –ï—Å–ª–∏ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –∏–ª–∏ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ
            self.bot.send_message(
                message.chat.id,
                "‚ùì –ù–µ –ø–æ–Ω–∏–º–∞—é —ç—Ç—É –∫–æ–º–∞–Ω–¥—É. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /menu –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.",
                reply_markup=get_main_menu_keyboard()
            )
            
        except Exception as e:
            self.bot.send_message(message.chat.id, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
    
    def handle_amount_input_manual(self, message: Message):
        """–†—É—á–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ —Å—É–º–º—ã"""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –æ—Ç–º–µ–Ω—É
            if message.text == "‚ùå –û—Ç–º–µ–Ω–∞":
                # –£–±–∏—Ä–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
                self.bot.send_message(
                    message.chat.id,
                    "‚ùå –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ",
                    reply_markup=ReplyKeyboardRemove()
                )
                self.show_main_menu(message)
                return
            
            # –í–∞–ª–∏–¥–∏—Ä—É–µ–º —Å—É–º–º—É
            amount_text = message.text.replace(',', '.')
            try:
                amount_float = float(amount_text)
                if amount_float <= 0:
                    raise ValueError("–°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–π")
            except ValueError:
                self.bot.send_message(
                    message.chat.id,
                    "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å—É–º–º—ã. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –±–æ–ª—å—à–µ 0.\n\n"
                    "–ü—Ä–∏–º–µ—Ä—ã: 150, 1500.50, 100,25",
                    reply_markup=get_cancel_keyboard()
                )
                return
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—É–º–º—É –∫–∞–∫ —á–∏—Å–ª–æ
            user_session = self.get_user_data(message.from_user.id)
            user_session['amount'] = amount_float
            
            # –£–±–∏—Ä–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –∏ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ
            self.bot.send_message(
                message.chat.id,
                "‚úÖ –°—É–º–º–∞ –ø—Ä–∏–Ω—è—Ç–∞",
                reply_markup=ReplyKeyboardRemove()
            )
            
            # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ
            self.bot.send_message(
                message.chat.id,
                "üìù –í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏:",
                reply_markup=get_skip_keyboard()
            )
            
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤–≤–æ–¥–∞ –æ–ø–∏—Å–∞–Ω–∏—è
            self.bot.set_state(message.from_user.id, TransactionStates.entering_description, message.chat.id)
            
        except Exception as e:
            self.bot.send_message(message.chat.id, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
    
    def handle_description_input_manual(self, message: Message):
        """–†—É—á–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –æ–ø–∏—Å–∞–Ω–∏—è"""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –æ—Ç–º–µ–Ω—É
            if message.text == "‚ùå –û—Ç–º–µ–Ω–∞":
                # –£–±–∏—Ä–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
                self.bot.send_message(
                    message.chat.id,
                    "‚ùå –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ",
                    reply_markup=ReplyKeyboardRemove()
                )
                self.show_main_menu(message)
                return
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ
            user_session = self.get_user_data(message.from_user.id)
            description = "–ë–µ–∑ –æ–ø–∏—Å–∞–Ω–∏—è" if message.text == "‚è≠Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å" else message.text
            user_session['description'] = description
            
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ–∫—É—â—É—é –¥–∞—Ç—É
            current_date = datetime.now().strftime("%d.%m.%Y")
            user_session['date'] = current_date
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
            transaction = Transaction(
                transaction_type=user_session['transaction_type'],
                date=user_session['date'],
                amount=user_session['amount'],
                description=user_session['description'],
                category=user_session['category']
            )
            
            confirmation_text = f"""
üìã *–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏*

{transaction.format_for_display()}

–î–æ–±–∞–≤–∏—Ç—å —ç—Ç—É —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é?
            """
            
            # –£–±–∏—Ä–∞–µ–º reply –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
            self.bot.send_message(
                message.chat.id,
                "‚úÖ –î–∞–Ω–Ω—ã–µ –ø—Ä–∏–Ω—è—Ç—ã",
                reply_markup=ReplyKeyboardRemove()
            )
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Å inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
            self.bot.send_message(
                message.chat.id,
                confirmation_text,
                parse_mode='Markdown',
                reply_markup=get_confirmation_keyboard('add')
            )
            
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
            self.bot.set_state(message.from_user.id, TransactionStates.confirming, message.chat.id)
            
        except Exception as e:
            self.bot.send_message(message.chat.id, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
    
    def handle_confirmation(self, call: CallbackQuery):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –¥–µ–π—Å—Ç–≤–∏–π"""
        try:
            action = call.data.split('_', 1)[1]
            
            if action == 'add':
                # –î–æ–±–∞–≤–ª—è–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
                user_session = self.get_user_data(call.from_user.id)
                
                # –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
                transaction = Transaction(
                    transaction_type=user_session['transaction_type'],
                    date=user_session['date'],
                    amount=user_session['amount'],
                    description=user_session['description'],
                    category=user_session['category']
                )
                
                # –î–æ–±–∞–≤–ª—è–µ–º –≤ Google Sheets
                try:
                    self.sheets_client.add_transaction(
                        transaction_type=transaction.transaction_type,
                        date=transaction.date,
                        amount=transaction.amount,
                        description=transaction.description,
                        category=transaction.category
                    )
                    
                    self.bot.edit_message_text(
                        "‚úÖ –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞!",
                        call.message.chat.id,
                        call.message.message_id
                    )
                    
                    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
                    self.bot.send_message(
                        call.message.chat.id,
                        "üè¶ *–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é*\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
                        parse_mode='Markdown',
                        reply_markup=get_main_menu_keyboard()
                    )
                    
                except Exception as e:
                    self.bot.edit_message_text(
                        f"‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏: {e}",
                        call.message.chat.id,
                        call.message.message_id
                    )
                    
                    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
                    self.bot.send_message(
                        call.message.chat.id,
                        "üè¶ *–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é*\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
                        parse_mode='Markdown',
                        reply_markup=get_main_menu_keyboard()
                    )
                
                # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                self.clear_user_data(call.from_user.id)
                
            # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            self.bot.delete_state(call.from_user.id, call.message.chat.id)
            self.bot.answer_callback_query(call.id)
            
        except Exception as e:
            self.bot.answer_callback_query(call.id, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")
    
    def handle_cancellation(self, call: CallbackQuery):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–º–µ–Ω—ã –¥–µ–π—Å—Ç–≤–∏–π"""
        try:
            self.bot.edit_message_text(
                "‚ùå –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ",
                call.message.chat.id,
                call.message.message_id
            )
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
            self.bot.send_message(
                call.message.chat.id,
                "üè¶ *–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é*\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
                parse_mode='Markdown',
                reply_markup=get_main_menu_keyboard()
            )
            
            # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            self.clear_user_data(call.from_user.id)
            self.bot.delete_state(call.from_user.id, call.message.chat.id)
            self.bot.answer_callback_query(call.id)
            
        except Exception as e:
            self.bot.answer_callback_query(call.id, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")
    
    def handle_back_to_main(self, call: CallbackQuery):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
        try:
            self.bot.edit_message_text(
                "üè¶ *–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é*\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
                call.message.chat.id,
                call.message.message_id,
                parse_mode='Markdown',
                reply_markup=get_main_menu_keyboard()
            )
            
            # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            self.clear_user_data(call.from_user.id)
            self.bot.delete_state(call.from_user.id, call.message.chat.id)
            self.bot.answer_callback_query(call.id)
            
        except Exception as e:
            self.bot.answer_callback_query(call.id, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
    def handle_show_stats(self, call: CallbackQuery):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–∫–∞–∑–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            if not check_access(call):
                self.bot.answer_callback_query(call.id, "üö´ –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –±–æ—Ç—É.")
                return
            
            self.bot.edit_message_text(
                "üìä *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞*\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:",
                call.message.chat.id,
                call.message.message_id,
                parse_mode='Markdown',
                reply_markup=get_statistics_keyboard()
            )
            self.bot.answer_callback_query(call.id)
        except Exception as e:
            self.bot.answer_callback_query(call.id, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")
    
    def handle_show_transactions(self, call: CallbackQuery):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–∫–∞–∑–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 10 —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
            df = self.sheets_client.get_transactions_df("–≤—Å–µ")
            
            if df.empty:
                self.bot.edit_message_text(
                    "üìã *–ú–æ–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏*\n\n‚ùå –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã",
                    call.message.chat.id,
                    call.message.message_id,
                    parse_mode='Markdown',
                    reply_markup=InlineKeyboardMarkup().add(
                        InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_main")
                    )
                )
            else:
                # –ë–µ—Ä–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 10 —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
                recent_transactions = df.tail(10)
                
                text = "üìã *–ü–æ—Å–ª–µ–¥–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏*\n\n"
                for _, row in recent_transactions.iterrows():
                    emoji = "üí∏" if row['–¢–∏–ø'] == '–†–∞—Å—Ö–æ–¥—ã' else "üí∞"
                    text += f"{emoji} {row['–î–∞—Ç–∞']} - {row['–ö–∞—Ç–µ–≥–æ—Ä–∏—è']}\n"
                    text += f"   {row['–°—É–º–º–∞']} - {row['–û–ø–∏—Å–∞–Ω–∏–µ']}\n\n"
                
                self.bot.edit_message_text(
                    text,
                    call.message.chat.id,
                    call.message.message_id,
                    parse_mode='Markdown',
                    reply_markup=InlineKeyboardMarkup().add(
                        InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_main")
                    )
                )
            
            self.bot.answer_callback_query(call.id)
        except Exception as e:
            self.bot.answer_callback_query(call.id, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")
    

    
    def handle_delete_transaction(self, call: CallbackQuery):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —É–¥–∞–ª–µ–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
            df = self.sheets_client.get_transactions_df("–≤—Å–µ")
            
            if df.empty:
                self.bot.edit_message_text(
                    "üóëÔ∏è *–£–¥–∞–ª–µ–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏*\n\n‚ùå –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã",
                    call.message.chat.id,
                    call.message.message_id,
                    parse_mode='Markdown',
                    reply_markup=InlineKeyboardMarkup().add(
                        InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_main")
                    )
                )
            else:
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
                self.bot.edit_message_text(
                    "üóëÔ∏è *–£–¥–∞–ª–µ–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏*\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:",
                    call.message.chat.id,
                    call.message.message_id,
                    parse_mode='Markdown',
                    reply_markup=get_transactions_list_keyboard(df, "delete")
                )
            
            self.bot.answer_callback_query(call.id)
        except Exception as e:
            self.bot.answer_callback_query(call.id, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")
    
    def handle_stats_type(self, call: CallbackQuery):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–∏–ø–æ–≤ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
        try:
            stats_type = call.data.split('_')[1]
            
            if stats_type == 'categories':
                # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
                df = self.sheets_client.get_transactions_df("–≤—Å–µ")
                
                if df.empty:
                    text = "üìä *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º*\n\n‚ùå –î–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã"
                else:
                    # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
                    category_stats = df.groupby('–ö–∞—Ç–µ–≥–æ—Ä–∏—è')['–°—É–º–º–∞_—á–∏—Å–ª–æ–≤–∞—è'].sum().sort_values(ascending=False)
                    
                    text = "üìä *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º*\n\n"
                    for category, amount in category_stats.head(10).items():
                        text += f"üè∑Ô∏è {category}: {amount:,.2f} —Ä. \n"
            
            elif stats_type == 'general':
                # –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
                df = self.sheets_client.get_transactions_df("–≤—Å–µ")
                
                if df.empty:
                    text = "üìã *–û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞*\n\n‚ùå –î–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã"
                else:
                    total_expense = df[df['–¢–∏–ø'] == '–†–∞—Å—Ö–æ–¥—ã']['–°—É–º–º–∞_—á–∏—Å–ª–æ–≤–∞—è'].sum()
                    total_income = df[df['–¢–∏–ø'] == '–î–æ—Ö–æ–¥—ã']['–°—É–º–º–∞_—á–∏—Å–ª–æ–≤–∞—è'].sum()
                    balance = total_income - total_expense
                    
                    text = f"""üìã *–û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞*

üí∏ –í—Å–µ–≥–æ —Ä–∞—Å—Ö–æ–¥–æ–≤: {total_expense:,.2f} —Ä.
üí∞ –í—Å–µ–≥–æ –¥–æ—Ö–æ–¥–æ–≤: {total_income:,.2f} —Ä.
üè¶ –ë–∞–ª–∞–Ω—Å: {balance:,.2f} —Ä.

üìä –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π: {len(df)}"""
            
            else:
                text = f"üìä *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞*\n\n–§—É–Ω–∫—Ü–∏—è '{stats_type}' –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ"
            
            self.bot.edit_message_text(
                text,
                call.message.chat.id,
                call.message.message_id,
                parse_mode='Markdown',
                reply_markup=InlineKeyboardMarkup().add(
                    InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="show_stats")
                )
            )
            self.bot.answer_callback_query(call.id)
        except Exception as e:
            self.bot.answer_callback_query(call.id, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")
    
    def handle_back_to_stats(self, call: CallbackQuery):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–µ"""
        try:
            self.bot.edit_message_text(
                "üìä *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞*\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:",
                call.message.chat.id,
                call.message.message_id,
                parse_mode='Markdown',
                reply_markup=get_statistics_keyboard()
            )
            self.bot.answer_callback_query(call.id)
        except Exception as e:
            self.bot.answer_callback_query(call.id, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
    def handle_show_management(self, call: CallbackQuery):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–∫–∞–∑–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è"""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            if not check_access(call):
                self.bot.answer_callback_query(call.id, "üö´ –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –±–æ—Ç—É.")
                return
            
            self.bot.edit_message_text(
                "‚öôÔ∏è *–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±–æ—Ç–æ–º*\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
                call.message.chat.id,
                call.message.message_id,
                parse_mode='Markdown',
                reply_markup=get_management_keyboard()
            )
            self.bot.answer_callback_query(call.id)
        except Exception as e:
            self.bot.answer_callback_query(call.id, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")
    
    def handle_refresh_categories(self, call: CallbackQuery):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π"""
        try:
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏
            self.bot.edit_message_text(
                "üîÑ *–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–π*\n\n‚è≥ –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏–∑ Google Sheets...",
                call.message.chat.id,
                call.message.message_id,
                parse_mode='Markdown'
            )
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –∫–µ—à
            result = self.sheets_client.refresh_categories_cache()
            
            if result['success']:
                text = f"""‚úÖ *–ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –æ–±–Ω–æ–≤–ª–µ–Ω—ã!*

üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è:
‚Ä¢ üí∏ –†–∞—Å—Ö–æ–¥—ã: {result['expenses_count']} –∫–∞—Ç–µ–≥–æ—Ä–∏–π
‚Ä¢ üí∞ –î–æ—Ö–æ–¥—ã: {result['income_count']} –∫–∞—Ç–µ–≥–æ—Ä–∏–π
‚Ä¢ üìã –í—Å–µ–≥–æ: {result['total_categories']} –∫–∞—Ç–µ–≥–æ—Ä–∏–π"""
            else:
                text = f"‚ùå *–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è*\n\n{result.get('error', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}"
            
            self.bot.edit_message_text(
                text,
                call.message.chat.id,
                call.message.message_id,
                parse_mode='Markdown',
                reply_markup=InlineKeyboardMarkup().add(
                    InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_management")
                )
            )
            self.bot.answer_callback_query(call.id)
        except Exception as e:
            self.bot.answer_callback_query(call.id, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")
    
    def handle_cache_info(self, call: CallbackQuery):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–µ—à–µ"""
        try:
            cache_info = self.sheets_client.get_cache_info()
            
            if cache_info['exists']:
                if 'error' in cache_info:
                    text = f"‚ùå *–û—à–∏–±–∫–∞ –∫–µ—à–∞*\n\n{cache_info['error']}"
                elif 'message' in cache_info:
                    text = f"‚ö†Ô∏è *–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–µ—à–µ*\n\n{cache_info['message']}"
                    if 'total_categories' in cache_info:
                        text += f"\nüìã –ö–∞—Ç–µ–≥–æ—Ä–∏–π –≤ –∫–µ—à–µ: {cache_info['total_categories']}"
                else:
                    status = "üî¥ –ò—Å—Ç–µ–∫" if cache_info['is_expired'] else "üü¢ –î–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–π"
                    age_hours = cache_info['age_hours']
                    
                    text = f"""üìã *–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–µ—à–µ*

üïê –í–æ–∑—Ä–∞—Å—Ç: {age_hours:.1f} —á–∞—Å–æ–≤
üìä –°—Ç–∞—Ç—É—Å: {status}
üìÅ –ö–∞—Ç–µ–≥–æ—Ä–∏–π: {cache_info['total_categories']}
üè∑Ô∏è –¢–∏–ø—ã: {', '.join(cache_info['category_types'])}
üìÖ –°–æ–∑–¥–∞–Ω: {cache_info['timestamp'][:16]}"""
            else:
                text = "‚ùå *–ö–µ—à –Ω–µ –Ω–∞–π–¥–µ–Ω*\n\n–ö–µ—à –∫–∞—Ç–µ–≥–æ—Ä–∏–π –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏–ª–∏ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω."
            
            self.bot.edit_message_text(
                text,
                call.message.chat.id,
                call.message.message_id,
                parse_mode='Markdown',
                reply_markup=InlineKeyboardMarkup().add(
                    InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_management")
                )
            )
            self.bot.answer_callback_query(call.id)
        except Exception as e:
            self.bot.answer_callback_query(call.id, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")
    
    def handle_clear_cache(self, call: CallbackQuery):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—á–∏—Å—Ç–∫–∏ –∫–µ—à–∞"""
        try:
            success = self.sheets_client.cache_manager.clear_cache()
            
            if success:
                text = "‚úÖ *–ö–µ—à –æ—á–∏—â–µ–Ω*\n\n–ö–µ—à –∫–∞—Ç–µ–≥–æ—Ä–∏–π —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω."
            else:
                text = "‚ùå *–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏*\n\n–ù–µ —É–¥–∞–ª–æ—Å—å –æ—á–∏—Å—Ç–∏—Ç—å –∫–µ—à."
            
            self.bot.edit_message_text(
                text,
                call.message.chat.id,
                call.message.message_id,
                parse_mode='Markdown',
                reply_markup=InlineKeyboardMarkup().add(
                    InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_management")
                )
            )
            self.bot.answer_callback_query(call.id)
        except Exception as e:
            self.bot.answer_callback_query(call.id, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")
    
    def handle_system_status(self, call: CallbackQuery):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å—Ç–∞—Ç—É—Å–∞ —Å–∏—Å—Ç–µ–º—ã"""
        try:
            # –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞
            cache_info = self.sheets_client.get_cache_info()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Google Sheets
            try:
                test_data = self.sheets_client.get_all_data('–°–≤–æ–¥–∫–∞')
                sheets_status = "üü¢ –ü–æ–¥–∫–ª—é—á–µ–Ω"
            except Exception:
                sheets_status = "üî¥ –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è"
            
            # –°—Ç–∞—Ç—É—Å –∫–µ—à–∞
            if cache_info['exists'] and not cache_info.get('is_expired', True):
                cache_status = "üü¢ –î–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–π"
            elif cache_info['exists']:
                cache_status = "üü° –ò—Å—Ç–µ–∫"
            else:
                cache_status = "üî¥ –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç"
            
            text = f"""üìä *–°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã*

üîó Google Sheets: {sheets_status}
üíæ –ö–µ—à –∫–∞—Ç–µ–≥–æ—Ä–∏–π: {cache_status}
ü§ñ –ë–æ—Ç: üü¢ –†–∞–±–æ—Ç–∞–µ—Ç

üìã –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:
‚Ä¢ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ —Å–µ—Å—Å–∏–∏: {len(self.user_data)}
‚Ä¢ –í–µ—Ä—Å–∏—è: 1.0"""
            
            self.bot.edit_message_text(
                text,
                call.message.chat.id,
                call.message.message_id,
                parse_mode='Markdown',
                reply_markup=InlineKeyboardMarkup().add(
                    InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_management")
                )
            )
            self.bot.answer_callback_query(call.id)
        except Exception as e:
            self.bot.answer_callback_query(call.id, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")
    
    def handle_back_to_management(self, call: CallbackQuery):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—é"""
        try:
            self.bot.edit_message_text(
                "‚öôÔ∏è *–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±–æ—Ç–æ–º*\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
                call.message.chat.id,
                call.message.message_id,
                parse_mode='Markdown',
                reply_markup=get_management_keyboard()
            )
            self.bot.answer_callback_query(call.id)
        except Exception as e:
            self.bot.answer_callback_query(call.id, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")
    
    def handle_delete_transaction_selection(self, call: CallbackQuery):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è"""
        try:
            # –ü–∞—Ä—Å–∏–º callback_data: delete_trans_10_—Ä–∞—Å—Ö–æ–¥—ã
            parts = call.data.split('_')
            if len(parts) < 4:
                self.bot.answer_callback_query(call.id, "‚ùå –û—à–∏–±–∫–∞ –¥–∞–Ω–Ω—ã—Ö")
                return
            
            row_index = int(parts[2])
            transaction_type = parts[3]
            
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
            df = self.sheets_client.get_transactions_df("–≤—Å–µ")
            transaction_data = df[df['–°—Ç—Ä–æ–∫–∞'] == row_index]
            
            if transaction_data.empty:
                self.bot.answer_callback_query(call.id, "‚ùå –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
                return
            
            row = transaction_data.iloc[0]
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è
            confirmation_text = f"""
üóëÔ∏è *–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è*

–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç—É —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é?

{'üí∏' if row['–¢–∏–ø'] == '–†–∞—Å—Ö–æ–¥—ã' else 'üí∞'} **{row['–¢–∏–ø']}**
üìÖ –î–∞—Ç–∞: {row['–î–∞—Ç–∞']}
üí∞ –°—É–º–º–∞: {row['–°—É–º–º–∞']}
üè∑Ô∏è –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {row['–ö–∞—Ç–µ–≥–æ—Ä–∏—è']}
üìù –û–ø–∏—Å–∞–Ω–∏–µ: {row['–û–ø–∏—Å–∞–Ω–∏–µ']}
            """
            
            self.bot.edit_message_text(
                confirmation_text,
                call.message.chat.id,
                call.message.message_id,
                parse_mode='Markdown',
                reply_markup=get_delete_confirmation_keyboard(row_index, transaction_type)
            )
            
            self.bot.answer_callback_query(call.id)
        except Exception as e:
            self.bot.answer_callback_query(call.id, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")
    
    def handle_confirm_delete_transaction(self, call: CallbackQuery):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —É–¥–∞–ª–µ–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏"""
        try:
            # –ü–∞—Ä—Å–∏–º callback_data: confirm_delete_10_—Ä–∞—Å—Ö–æ–¥—ã
            parts = call.data.split('_')
            if len(parts) < 4:
                self.bot.answer_callback_query(call.id, "‚ùå –û—à–∏–±–∫–∞ –¥–∞–Ω–Ω—ã—Ö")
                return
            
            row_index = int(parts[2])
            transaction_type = parts[3]
            
            # –£–¥–∞–ª—è–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
            self.sheets_client.delete_transaction(row_index, transaction_type)
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É—Å–ø–µ—Ö
            self.bot.edit_message_text(
                "‚úÖ *–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è —É–¥–∞–ª–µ–Ω–∞*\n\n–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞ –∏–∑ Google Sheets.",
                call.message.chat.id,
                call.message.message_id,
                parse_mode='Markdown'
            )
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
            self.bot.send_message(
                call.message.chat.id,
                "üè¶ *–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é*\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
                parse_mode='Markdown',
                reply_markup=get_main_menu_keyboard()
            )
            
            self.bot.answer_callback_query(call.id, "‚úÖ –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è —É–¥–∞–ª–µ–Ω–∞")
        except Exception as e:
            self.bot.edit_message_text(
                f"‚ùå *–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è*\n\n{str(e)}",
                call.message.chat.id,
                call.message.message_id,
                parse_mode='Markdown',
                reply_markup=InlineKeyboardMarkup().add(
                    InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_main")
                )
            )
            self.bot.answer_callback_query(call.id, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")
    

    

    

    
    def run(self):
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
        try:
            self.bot.infinity_polling(none_stop=True)
        except Exception as e:
            raise 