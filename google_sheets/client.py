# -*- coding: utf-8 -*-
"""
–ö–ª–∏–µ–Ω—Ç –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Google Sheets API
"""
import gspread
from google.oauth2.service_account import Credentials
from typing import List, Dict, Any
import pandas as pd
from config.settings import GOOGLE_SHEETS_CREDENTIALS_PATH, GOOGLE_SHEETS_SPREADSHEET_ID
from utils.cache_manager import CacheManager


class GoogleSheetsClient:
    """–ö–ª–∏–µ–Ω—Ç –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Google Sheets"""
    
    def __init__(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–∞ Google Sheets"""
        self.scope = [
            'https://spreadsheets.google.com/feeds',
            'https://www.googleapis.com/auth/drive'
        ]
        self.credentials = None
        self.client = None
        self.spreadsheet = None
        self.cache_manager = CacheManager()
        self._authenticate()
    
    def _authenticate(self):
        """–ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è —Å –ø–æ–º–æ—â—å—é Service Account"""
        try:
            self.credentials = Credentials.from_service_account_file(
                GOOGLE_SHEETS_CREDENTIALS_PATH, 
                scopes=self.scope
            )
            self.client = gspread.authorize(self.credentials)
            self.spreadsheet = self.client.open_by_key(GOOGLE_SHEETS_SPREADSHEET_ID)
            print("‚úÖ –£—Å–ø–µ—à–Ω–æ –ø–æ–¥–∫–ª—é—á–µ–Ω –∫ Google Sheets")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Google Sheets: {e}")
            raise
    
    def get_worksheet(self, sheet_name: str = None):
        """
        –ü–æ–ª—É—á–∏—Ç—å –ª–∏—Å—Ç —Ç–∞–±–ª–∏—Ü—ã
        
        Args:
            sheet_name (str): –ù–∞–∑–≤–∞–Ω–∏–µ –ª–∏—Å—Ç–∞. –ï—Å–ª–∏ None, –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–µ—Ä–≤—ã–π –ª–∏—Å—Ç
        
        Returns:
            gspread.Worksheet: –û–±—ä–µ–∫—Ç –ª–∏—Å—Ç–∞
        """
        try:
            if sheet_name:
                return self.spreadsheet.worksheet(sheet_name)
            else:
                return self.spreadsheet.sheet1
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ª–∏—Å—Ç–∞ {sheet_name}: {e}")
            raise
    
    def get_all_data(self, sheet_name: str = None) -> List[List[str]]:
        """
        –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ –ª–∏—Å—Ç–∞
        
        Args:
            sheet_name (str): –ù–∞–∑–≤–∞–Ω–∏–µ –ª–∏—Å—Ç–∞
        
        Returns:
            List[List[str]]: –í—Å–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ –ª–∏—Å—Ç–∞
        """
        try:
            worksheet = self.get_worksheet(sheet_name)
            return worksheet.get_all_values()
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö: {e}")
            raise
    
    def get_categories(self, category_type: str = "—Ä–∞—Å—Ö–æ–¥—ã") -> List[str]:
        """
        –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–π (—Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –∫–µ—à–∞)
        
        Args:
            category_type (str): –¢–∏–ø –∫–∞—Ç–µ–≥–æ—Ä–∏–π - "—Ä–∞—Å—Ö–æ–¥—ã" –∏–ª–∏ "–¥–æ—Ö–æ–¥—ã"
        
        Returns:
            List[str]: –°–ø–∏—Å–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
        """
        try:
            # –°–Ω–∞—á–∞–ª–∞ –ø—ã—Ç–∞–µ–º—Å—è –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑ –∫–µ—à–∞
            cached_categories = self.cache_manager.load_categories()
            
            if cached_categories and category_type in cached_categories:
                print(f"üìã –ó–∞–≥—Ä—É–∂–µ–Ω—ã –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏–∑ –∫–µ—à–∞: {category_type}")
                return cached_categories[category_type]
            
            # –ï—Å–ª–∏ –∫–µ—à –ø—É—Å—Ç –∏–ª–∏ —É—Å—Ç–∞—Ä–µ–ª, –∑–∞–≥—Ä—É–∂–∞–µ–º –∏–∑ Google Sheets
            print(f"üîÑ –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏–∑ Google Sheets...")
            categories = self._fetch_categories_from_sheets(category_type)
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –∫–µ—à
            self._update_cache_with_categories()
            
            return categories
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π: {e}")
            return []
    
    def _fetch_categories_from_sheets(self, category_type: str = "—Ä–∞—Å—Ö–æ–¥—ã") -> List[str]:
        """
        –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –Ω–∞–ø—Ä—è–º—É—é –∏–∑ Google Sheets
        
        Args:
            category_type (str): –¢–∏–ø –∫–∞—Ç–µ–≥–æ—Ä–∏–π - "—Ä–∞—Å—Ö–æ–¥—ã" –∏–ª–∏ "–¥–æ—Ö–æ–¥—ã"
        
        Returns:
            List[str]: –°–ø–∏—Å–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
        """
        try:
            data = self.get_all_data('–°–≤–æ–¥–∫–∞')
            if not data:
                return []
            
            categories = []
            
            # –ò—â–µ–º —Å—Ç—Ä–æ–∫—É "–ò—Ç–æ–≥–æ" - –ø–æ—Å–ª–µ –Ω–µ—ë –∏–¥—É—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
            start_index = -1
            for i, row in enumerate(data):
                if len(row) > 1 and row[1] == "–ò—Ç–æ–≥–æ":
                    start_index = i + 1  # –ù–∞—á–∏–Ω–∞–µ–º —Å —Å–ª–µ–¥—É—é—â–µ–π —Å—Ç—Ä–æ–∫–∏ –ø–æ—Å–ª–µ "–ò—Ç–æ–≥–æ"
                    break
            
            if start_index == -1:
                print("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–∞ —Å—Ç—Ä–æ–∫–∞ '–ò—Ç–æ–≥–æ' –≤ –ª–∏—Å—Ç–µ –°–≤–æ–¥–∫–∞")
                return []
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∏–Ω–¥–µ–∫—Å —Å—Ç–æ–ª–±—Ü–∞ –¥–ª—è –Ω—É–∂–Ω–æ–≥–æ —Ç–∏–ø–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
            if category_type.lower() == "—Ä–∞—Å—Ö–æ–¥—ã":
                column_index = 1  # –°—Ç–æ–ª–±–µ—Ü B (–∏–Ω–¥–µ–∫—Å 1)
            elif category_type.lower() == "–¥–æ—Ö–æ–¥—ã":
                column_index = 7  # –°—Ç–æ–ª–±–µ—Ü H (–∏–Ω–¥–µ–∫—Å 7)
            else:
                return []
            
            # –°–æ–±–∏—Ä–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–∞—á–∏–Ω–∞—è —Å –Ω–∞–π–¥–µ–Ω–Ω–æ–π –ø–æ–∑–∏—Ü–∏–∏
            for i in range(start_index, len(data)):
                row = data[i]
                if len(row) > column_index and row[column_index]:
                    category = row[column_index].strip()
                    
                    # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—É—Å—Ç—ã–µ –∏ —Å–ª—É–∂–µ–±–Ω—ã–µ —Å—Ç—Ä–æ–∫–∏
                    if category and category not in ["–ò—Ç–æ–≥–æ", "–ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º—ã–µ", "–§–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ"]:
                        # –û—á–∏—â–∞–µ–º –æ—Ç —Å–ø–µ—Ü—Å–∏–º–≤–æ–ª–æ–≤ (–Ω–∞–ø—Ä–∏–º–µ—Ä \xa0)
                        category = category.replace('\xa0', ' ').strip()
                        categories.append(category)
                
                # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º—Å—è, –µ—Å–ª–∏ –¥–æ—à–ª–∏ –¥–æ –∫–æ–Ω—Ü–∞ –¥–∞–Ω–Ω—ã—Ö
                if i >= len(data) - 1:
                    break
            
            return categories
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π: {e}")
            return []
    
    def _update_cache_with_categories(self):
        """–û–±–Ω–æ–≤–∏—Ç—å –∫–µ—à –≤—Å–µ–º–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏"""
        try:
            categories = {
                "—Ä–∞—Å—Ö–æ–¥—ã": self._fetch_categories_from_sheets("—Ä–∞—Å—Ö–æ–¥—ã"),
                "–¥–æ—Ö–æ–¥—ã": self._fetch_categories_from_sheets("–¥–æ—Ö–æ–¥—ã")
            }
            
            self.cache_manager.save_categories(categories)
            print("‚úÖ –ö–µ—à –∫–∞—Ç–µ–≥–æ—Ä–∏–π –æ–±–Ω–æ–≤–ª–µ–Ω")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–µ—à–∞: {e}")
    
    def refresh_categories_cache(self) -> Dict[str, Any]:
        """
        –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–∏—Ç—å –∫–µ—à –∫–∞—Ç–µ–≥–æ—Ä–∏–π
        
        Returns:
            Dict[str, Any]: –†–µ–∑—É–ª—å—Ç–∞—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        """
        try:
            # –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–π –∫–µ—à
            self.cache_manager.clear_cache()
            
            # –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏–∑ Google Sheets
            expenses = self._fetch_categories_from_sheets("—Ä–∞—Å—Ö–æ–¥—ã")
            income = self._fetch_categories_from_sheets("–¥–æ—Ö–æ–¥—ã")
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫–µ—à
            categories = {
                "—Ä–∞—Å—Ö–æ–¥—ã": expenses,
                "–¥–æ—Ö–æ–¥—ã": income
            }
            
            success = self.cache_manager.save_categories(categories)
            
            return {
                'success': success,
                'expenses_count': len(expenses),
                'income_count': len(income),
                'total_categories': len(expenses) + len(income)
            }
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–µ—à–∞: {e}")
            return {
                'success': False,
                'error': str(e)
            }
    
    def get_cache_info(self) -> Dict[str, Any]:
        """
        –ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–µ—à–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
        
        Returns:
            Dict[str, Any]: –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–µ—à–µ
        """
        return self.cache_manager.get_cache_info()
    
    def add_transaction(self, transaction_type: str, date: str, amount: float, description: str, category: str):
        """
        –î–æ–±–∞–≤–∏—Ç—å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é –≤ —Ç–∞–±–ª–∏—Ü—É
        
        Args:
            transaction_type (str): –¢–∏–ø —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ - "—Ä–∞—Å—Ö–æ–¥—ã" –∏–ª–∏ "–¥–æ—Ö–æ–¥—ã"
            date (str): –î–∞—Ç–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ 'DD.MM.YYYY'
            amount (float): –°—É–º–º–∞ –∫–∞–∫ —á–∏—Å–ª–æ
            description (str): –û–ø–∏—Å–∞–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
            category (str): –ö–∞—Ç–µ–≥–æ—Ä–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
        """
        try:
            worksheet = self.get_worksheet('–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏')
            
            # –ù–∞—Ö–æ–¥–∏–º –ø–µ—Ä–≤—É—é –ø—É—Å—Ç—É—é —Å—Ç—Ä–æ–∫—É –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
            data = worksheet.get_all_values()
            empty_row = len(data) + 1
            
            if transaction_type.lower() == "—Ä–∞—Å—Ö–æ–¥—ã":
                # –î–æ–±–∞–≤–ª—è–µ–º –≤ —Å–µ–∫—Ü–∏—é —Ä–∞—Å—Ö–æ–¥–æ–≤ (—Å—Ç–æ–ª–±—Ü—ã B-E)
                range_name = f'B{empty_row}:E{empty_row}'
                worksheet.update(range_name, [[date, amount, description, category]])
                print(f"‚úÖ –†–∞—Å—Ö–æ–¥ –¥–æ–±–∞–≤–ª–µ–Ω: {date} - {category} - {amount}")
            
            elif transaction_type.lower() == "–¥–æ—Ö–æ–¥—ã":
                # –î–æ–±–∞–≤–ª—è–µ–º –≤ —Å–µ–∫—Ü–∏—é –¥–æ—Ö–æ–¥–æ–≤ (—Å—Ç–æ–ª–±—Ü—ã G-J)
                range_name = f'G{empty_row}:J{empty_row}'
                worksheet.update(range_name, [[date, amount, description, category]])
                print(f"‚úÖ –î–æ—Ö–æ–¥ –¥–æ–±–∞–≤–ª–µ–Ω: {date} - {category} - {amount}")
            
            else:
                raise ValueError(f"–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ç–∏–ø —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏: {transaction_type}")
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏: {e}")
            raise
    
    def get_transactions_df(self, transaction_type: str = "–≤—Å–µ") -> pd.DataFrame:
        """
        –ü–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è—Ö –≤ –≤–∏–¥–µ DataFrame
        
        Args:
            transaction_type (str): –¢–∏–ø —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π - "—Ä–∞—Å—Ö–æ–¥—ã", "–¥–æ—Ö–æ–¥—ã" –∏–ª–∏ "–≤—Å–µ"
        
        Returns:
            pd.DataFrame: DataFrame —Å –¥–∞–Ω–Ω—ã–º–∏ –æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è—Ö
        """
        try:
            data = self.get_all_data('–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏')
            if not data:
                return pd.DataFrame()
            
            transactions = []
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –Ω–∞—á–∏–Ω–∞—è —Å 5-–π —Å—Ç—Ä–æ–∫–∏ (–∏–Ω–¥–µ–∫—Å 4)
            for i, row in enumerate(data[4:], start=5):
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞—Å—Ö–æ–¥—ã (—Å—Ç–æ–ª–±—Ü—ã B-E, –∏–Ω–¥–µ–∫—Å—ã 1-4)
                if (transaction_type.lower() in ["—Ä–∞—Å—Ö–æ–¥—ã", "–≤—Å–µ"] and 
                    len(row) > 4 and row[1] and row[2] and row[4]):
                    transactions.append({
                        '–¢–∏–ø': '–†–∞—Å—Ö–æ–¥—ã',
                        '–î–∞—Ç–∞': row[1],
                        '–°—É–º–º–∞': row[2],
                        '–û–ø–∏—Å–∞–Ω–∏–µ': row[3],
                        '–ö–∞—Ç–µ–≥–æ—Ä–∏—è': row[4],
                        '–°—Ç—Ä–æ–∫–∞': i
                    })
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Ö–æ–¥—ã (—Å—Ç–æ–ª–±—Ü—ã G-J, –∏–Ω–¥–µ–∫—Å—ã 6-9)
                if (transaction_type.lower() in ["–¥–æ—Ö–æ–¥—ã", "–≤—Å–µ"] and 
                    len(row) > 9 and row[6] and row[7] and row[9]):
                    transactions.append({
                        '–¢–∏–ø': '–î–æ—Ö–æ–¥—ã',
                        '–î–∞—Ç–∞': row[6],
                        '–°—É–º–º–∞': row[7],
                        '–û–ø–∏—Å–∞–Ω–∏–µ': row[8],
                        '–ö–∞—Ç–µ–≥–æ—Ä–∏—è': row[9],
                        '–°—Ç—Ä–æ–∫–∞': i
                    })
            
            df = pd.DataFrame(transactions)
            
            if not df.empty:
                # –û—á–∏—Å—Ç–∫–∞ –∏ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
                df['–°—É–º–º–∞_—á–∏—Å–ª–æ–≤–∞—è'] = df['–°—É–º–º–∞'].apply(self._parse_amount)
                df['–î–∞—Ç–∞_datetime'] = pd.to_datetime(df['–î–∞—Ç–∞'], format='%d.%m.%Y', errors='coerce')
            
            return df
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è DataFrame: {e}")
            return pd.DataFrame()
    
    def _parse_amount(self, amount_str: str) -> float:
        """
        –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å —Å—Ç—Ä–æ–∫—É —Å—É–º–º—ã –≤ —á–∏—Å–ª–æ
        
        Args:
            amount_str (str): –°—Ç—Ä–æ–∫–∞ —Å —Å—É–º–º–æ–π (–Ω–∞–ø—Ä–∏–º–µ—Ä, "1000,00 —Ä.")
        
        Returns:
            float: –ß–∏—Å–ª–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ —Å—É–º–º—ã
        """
        try:
            # –£–±–∏—Ä–∞–µ–º —Å–∏–º–≤–æ–ª –≤–∞–ª—é—Ç—ã –∏ –∑–∞–º–µ–Ω—è–µ–º –∑–∞–ø—è—Ç—É—é –Ω–∞ —Ç–æ—á–∫—É
            amount_clean = amount_str.replace('—Ä.', '').replace(' ', '').replace(',', '.')
            return float(amount_clean)
        except:
            return 0.0
    
    def update_transaction(self, row_index: int, transaction_type: str, date: str, amount: float, description: str, category: str):
        """
        –û–±–Ω–æ–≤–∏—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
        
        Args:
            row_index (int): –ò–Ω–¥–µ–∫—Å —Å—Ç—Ä–æ–∫–∏ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è (–Ω–∞—á–∏–Ω–∞—è —Å 1)
            transaction_type (str): –¢–∏–ø —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ - "—Ä–∞—Å—Ö–æ–¥—ã" –∏–ª–∏ "–¥–æ—Ö–æ–¥—ã"
            date (str): –î–∞—Ç–∞
            amount (float): –°—É–º–º–∞ –∫–∞–∫ —á–∏—Å–ª–æ
            description (str): –û–ø–∏—Å–∞–Ω–∏–µ
            category (str): –ö–∞—Ç–µ–≥–æ—Ä–∏—è
        """
        try:
            worksheet = self.get_worksheet('–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏')
            
            if transaction_type.lower() == "—Ä–∞—Å—Ö–æ–¥—ã":
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å–µ–∫—Ü–∏—é —Ä–∞—Å—Ö–æ–¥–æ–≤ (—Å—Ç–æ–ª–±—Ü—ã B-E)
                range_name = f'B{row_index}:E{row_index}'
                worksheet.update(range_name, [[date, amount, description, category]])
                print(f"‚úÖ –†–∞—Å—Ö–æ–¥ –æ–±–Ω–æ–≤–ª–µ–Ω –≤ —Å—Ç—Ä–æ–∫–µ {row_index}")
            
            elif transaction_type.lower() == "–¥–æ—Ö–æ–¥—ã":
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å–µ–∫—Ü–∏—é –¥–æ—Ö–æ–¥–æ–≤ (—Å—Ç–æ–ª–±—Ü—ã G-J)
                range_name = f'G{row_index}:J{row_index}'
                worksheet.update(range_name, [[date, amount, description, category]])
                print(f"‚úÖ –î–æ—Ö–æ–¥ –æ–±–Ω–æ–≤–ª–µ–Ω –≤ —Å—Ç—Ä–æ–∫–µ {row_index}")
            
            else:
                raise ValueError(f"–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ç–∏–ø —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏: {transaction_type}")
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏: {e}")
            raise
    
    def delete_transaction(self, row_index: int, transaction_type: str):
        """
        –£–¥–∞–ª–∏—Ç—å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é (–æ—á–∏—Å—Ç–∏—Ç—å —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ —è—á–µ–π–∫–∏)
        
        Args:
            row_index (int): –ò–Ω–¥–µ–∫—Å —Å—Ç—Ä–æ–∫–∏ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è (–Ω–∞—á–∏–Ω–∞—è —Å 1)
            transaction_type (str): –¢–∏–ø —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ - "—Ä–∞—Å—Ö–æ–¥—ã" –∏–ª–∏ "–¥–æ—Ö–æ–¥—ã"
        """
        try:
            worksheet = self.get_worksheet('–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏')
            
            if transaction_type.lower() == "—Ä–∞—Å—Ö–æ–¥—ã":
                # –û—á–∏—â–∞–µ–º —Å–µ–∫—Ü–∏—é —Ä–∞—Å—Ö–æ–¥–æ–≤ (—Å—Ç–æ–ª–±—Ü—ã B-E)
                range_name = f'B{row_index}:E{row_index}'
                worksheet.batch_clear([range_name])
                print(f"‚úÖ –†–∞—Å—Ö–æ–¥ —É–¥–∞–ª–µ–Ω –∏–∑ —Å—Ç—Ä–æ–∫–∏ {row_index}")
            
            elif transaction_type.lower() == "–¥–æ—Ö–æ–¥—ã":
                # –û—á–∏—â–∞–µ–º —Å–µ–∫—Ü–∏—é –¥–æ—Ö–æ–¥–æ–≤ (—Å—Ç–æ–ª–±—Ü—ã G-J)
                range_name = f'G{row_index}:J{row_index}'
                worksheet.batch_clear([range_name])
                print(f"‚úÖ –î–æ—Ö–æ–¥ —É–¥–∞–ª–µ–Ω –∏–∑ —Å—Ç—Ä–æ–∫–∏ {row_index}")
            
            else:
                raise ValueError(f"–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ç–∏–ø —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏: {transaction_type}")
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏: {e}")
            raise 