# -*- coding: utf-8 -*-
"""
–ú–æ–¥–µ–ª—å –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
"""
from dataclasses import dataclass
from typing import Optional
from datetime import datetime


@dataclass
class Transaction:
    """–ú–æ–¥–µ–ª—å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏"""
    
    transaction_type: str  # "—Ä–∞—Å—Ö–æ–¥—ã" –∏–ª–∏ "–¥–æ—Ö–æ–¥—ã"
    date: str  # –î–∞—Ç–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ DD.MM.YYYY
    amount: float  # –°—É–º–º–∞ –∫–∞–∫ —á–∏—Å–ª–æ
    description: str  # –û–ø–∏—Å–∞–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
    category: str  # –ö–∞—Ç–µ–≥–æ—Ä–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
    row_index: Optional[int] = None  # –ò–Ω–¥–µ–∫—Å —Å—Ç—Ä–æ–∫–∏ –≤ —Ç–∞–±–ª–∏—Ü–µ (–¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è)
    
    def __post_init__(self):
        """–í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è –æ–±—ä–µ–∫—Ç–∞"""
        if self.transaction_type.lower() not in ["—Ä–∞—Å—Ö–æ–¥—ã", "–¥–æ—Ö–æ–¥—ã"]:
            raise ValueError(f"–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ç–∏–ø —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏: {self.transaction_type}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã
        try:
            datetime.strptime(self.date, "%d.%m.%Y")
        except ValueError:
            raise ValueError(f"–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã: {self.date}. –û–∂–∏–¥–∞–µ—Ç—Å—è DD.MM.YYYY")
    
    def get_amount_float(self) -> float:
        """
        –ü–æ–ª—É—á–∏—Ç—å —Å—É–º–º—É –≤ –≤–∏–¥–µ —á–∏—Å–ª–∞
        
        Returns:
            float: –ß–∏—Å–ª–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ —Å—É–º–º—ã
        """
        return self.amount
    
    def format_for_display(self) -> str:
        """
        –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        
        Returns:
            str: –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å—Ç—Ä–æ–∫–∞
        """
        type_emoji = "üí∏" if self.transaction_type.lower() == "—Ä–∞—Å—Ö–æ–¥—ã" else "üí∞"
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å—É–º–º—É –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        amount_display = f"{self.amount:,.2f} —Ä.".replace('.', ',')
        
        return f"{type_emoji} {self.date} | {amount_display} | {self.category}\nüìù {self.description}"
    
    def to_dict(self) -> dict:
        """
        –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å –≤ —Å–ª–æ–≤–∞—Ä—å
        
        Returns:
            dict: –°–ª–æ–≤–∞—Ä—å —Å –¥–∞–Ω–Ω—ã–º–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
        """
        return {
            'type': self.transaction_type,
            'date': self.date,
            'amount': self.amount,
            'description': self.description,
            'category': self.category,
            'row_index': self.row_index
        }
    
    @classmethod
    def from_dict(cls, data: dict) -> 'Transaction':
        """
        –°–æ–∑–¥–∞—Ç—å –æ–±—ä–µ–∫—Ç –∏–∑ —Å–ª–æ–≤–∞—Ä—è
        
        Args:
            data (dict): –°–ª–æ–≤–∞—Ä—å —Å –¥–∞–Ω–Ω—ã–º–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
        
        Returns:
            Transaction: –û–±—ä–µ–∫—Ç —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
        """
        return cls(
            transaction_type=data['type'],
            date=data['date'],
            amount=data['amount'],
            description=data['description'],
            category=data['category'],
            row_index=data.get('row_index')
        ) 